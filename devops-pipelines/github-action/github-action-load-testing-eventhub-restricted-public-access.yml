---
name: load-testing-eventhub-restricted-public-access
# Controls when the action will run.
on:  # yamllint disable-line rule:truthy

  workflow_dispatch:
    inputs:
      eventhubSku:
        description: 'Azure Event Hubs Sku'
        default: "Standard"
        type: choice
        required: true
        options:
          - "Basic"
          - "Standard"
          - "Premium"
      duration:
        description: 'Azure Load Testing duration in seconds'
        required: true
        default: '60'
      threads:
        description: 'Azure Load Testing number of threads'
        required: true
        default: '1'
      engineInstances:
        description: 'Azure Load Testing number of Engine Instances'
        required: true
        default: '1'
      errorPercentage:
        description: 'Azure Load Testing success criteria Error Percentage threshold'
        required: true
        default: '5'
      responseTimeMs:
        description: 'Azure Load Testing success criteria average response time in ms threshold'
        required: true
        default: '100'

permissions: read-all

env:
  CONFIGURATION_FILE: './configuration/.default.env'
  AZURE_REGION: "${{ vars.AZURE_REGION }}"
  AZURE_TEST_SUFFIX: "${{ vars.AZURE_TEST_SUFFIX }}"
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  stage-deploy-infrastructure:
    runs-on: ubuntu-20.04
    outputs:
      EVENTHUB_NAME_SPACE: ${{ steps.deploy.outputs.EVENTHUB_NAME_SPACE }}
      EVENTHUB_INPUT_1_NAME: ${{ steps.deploy.outputs.EVENTHUB_INPUT_1_NAME }}
      EVENTHUB_INPUT_2_NAME: ${{ steps.deploy.outputs.EVENTHUB_INPUT_2_NAME }}
      EVENTHUB_OUTPUT_1_NAME: ${{ steps.deploy.outputs.EVENTHUB_OUTPUT_1_NAME }}
      EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: ${{ steps.deploy.outputs.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME }}
      EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: ${{ steps.deploy.outputs.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME }}
      EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: ${{ steps.deploy.outputs.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME }}
      STORAGE_ACCOUNT_NAME: ${{ steps.deploy.outputs.STORAGE_ACCOUNT_NAME }}
      APP_INSIGHTS_NAME: ${{ steps.deploy.outputs.APP_INSIGHTS_NAME }}
      RESOURCE_GROUP: ${{ steps.deploy.outputs.RESOURCE_GROUP }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Configuration file
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          {
            echo "AZURE_REGION=${{ env.AZURE_REGION }}"
            echo "AZURE_TEST_SUFFIX=${{ env.AZURE_TEST_SUFFIX }}"
            echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
            echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"
          } >> ${{ env.CONFIGURATION_FILE }}
          cat ${{ env.CONFIGURATION_FILE }}

      - name: Deploy Infrastructure
        id: deploy
        run: |
          cmd="devops-pipelines/utils/iactool.sh -a deploy -c ${{ env.CONFIGURATION_FILE }} -h ${{ github.event.inputs.eventhubSku }}"
          echo "$cmd"
          eval "$cmd"
          # Read new variables set after the deployment in configuration file
          set -o allexport
          source "${{ env.CONFIGURATION_FILE }}"
          set +o allexport
          # Create the associated Github Action variables
          {
            echo "EVENTHUB_NAME_SPACE=${EVENTHUB_NAME_SPACE}"
            echo "EVENTHUB_INPUT_1_NAME=${EVENTHUB_INPUT_1_NAME}"
            echo "EVENTHUB_INPUT_2_NAME=${EVENTHUB_INPUT_2_NAME}"
            echo "EVENTHUB_OUTPUT_1_NAME=${EVENTHUB_OUTPUT_1_NAME}"
            echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME=${EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME}"
            echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME=${EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME}"
            echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME=${EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME}"
            echo "STORAGE_ACCOUNT_NAME=${STORAGE_ACCOUNT_NAME}"
            echo "APP_INSIGHTS_NAME=${APP_INSIGHTS_NAME}"
            echo "RESOURCE_GROUP=${RESOURCE_GROUP}"
          } >> "$GITHUB_OUTPUT"

  stage-load-test:
    runs-on: ubuntu-20.04
    needs: [stage-deploy-infrastructure]

    steps:
      - uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        continue-on-error: false
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Configuration file
        run: |
          AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
          AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
          {
            echo "AZURE_REGION=${{ env.AZURE_REGION }}"
            echo "AZURE_TEST_SUFFIX=${{ env.AZURE_TEST_SUFFIX }}"
            echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
            echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"
            echo "EVENTHUB_NAME_SPACE=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_NAME_SPACE }}"
            echo "EVENTHUB_INPUT_1_NAME=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_1_NAME }}"
            echo "EVENTHUB_INPUT_2_NAME=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_2_NAME }}"
            echo "EVENTHUB_OUTPUT_1_NAME=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_OUTPUT_1_NAME }}"
            echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME }}"
            echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME }}"
            echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME=${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME }}"
            echo "STORAGE_ACCOUNT_NAME=${{ needs.stage-deploy-infrastructure.outputs.STORAGE_ACCOUNT_NAME }}"
            echo "APP_INSIGHTS_NAME=${{ needs.stage-deploy-infrastructure.outputs.APP_INSIGHTS_NAME }}"
            echo "RESOURCE_GROUP=${{ needs.stage-deploy-infrastructure.outputs.RESOURCE_GROUP }}"
          } >> "${{ env.CONFIGURATION_FILE }}"

      - name: Deploy Load Testing Infrastructure
        id: deployloadtest
        run: |
          cmd="devops-pipelines/utils/iactool.sh -a deploytest -c ${{ env.CONFIGURATION_FILE }} "
          echo "$cmd"
          eval "$cmd"

          # Read variables from configuration file
          set -o allexport
          source "${{ env.CONFIGURATION_FILE }}"
          set +o allexport

          echo "LOAD_TESTING_RESOURCE_GROUP=${LOAD_TESTING_RESOURCE_GROUP}"
          echo "LOAD_TESTING_NAME=${LOAD_TESTING_NAME}"

          # store load testing resource name and load testing resource group in step output
          echo "LOAD_TESTING_RESOURCE_GROUP=${LOAD_TESTING_RESOURCE_GROUP}" >> "$GITHUB_OUTPUT"
          echo "LOAD_TESTING_NAME=${LOAD_TESTING_NAME}"  >> "$GITHUB_OUTPUT"

      - name: Open access to EventHub and KeyVault for the test
        run: |
          cmd="devops-pipelines/utils/iactool.sh -a opentest -c ${{ env.CONFIGURATION_FILE }}"
          echo "$cmd"
          eval "$cmd"

      - name: Get EventHub Token and store it in Key Vault
        run: |
          # Read variables from configuration file
          set -o allexport
          source "${{ env.CONFIGURATION_FILE }}"
          set +o allexport

          # Get Event Hub Token
          KEY=$(az eventhubs namespace authorization-rule keys list --resource-group "${{ needs.stage-deploy-infrastructure.outputs.RESOURCE_GROUP }}" --namespace-name "${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_NAME_SPACE }}" --name RootManageSharedAccessKey | jq -r .primaryKey)
          EVENTHUB_TOKEN=$(./devops-pipelines/load-testing/get-event-hub-token.sh "${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_NAME_SPACE }}" RootManageSharedAccessKey "${KEY}")

          # store eventhub token into azure key vault secret
          az keyvault secret set --vault-name "${LOAD_TESTING_KEY_VAULT_NAME}" --name "${LOAD_TESTING_SECRET_NAME}" --value "${EVENTHUB_TOKEN}" --output none

      - name: Configure and display Load Testing Configuration for Eventhub
        id: configureloadtest
        continue-on-error: false
        run: |
          # Read variables from configuration file
          set -o allexport
          source "${{ env.CONFIGURATION_FILE }}"
          set +o allexport

          echo "EVENTHUB_NAME_SPACE: ${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_NAME_SPACE }}"
          echo "EVENTHUB_INPUT_1_NAME: ${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_1_NAME }}"
          echo "EVENTHUB_INPUT_2_NAME: ${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_2_NAME }}"
          echo "DURATION: ${{ github.event.inputs.duration }}"
          echo "THREADS: ${{ github.event.inputs.threads }}"
          echo "ENGINE INSTANCES: ${{ github.event.inputs.engineInstances }}"
          echo "ERROR PERCENTAGE: ${{ github.event.inputs.errorPercentage }}"
          echo "RESPONSE TIME MS: ${{ github.event.inputs.responseTimeMs }}"
          # Update Load Testing configuration file
          TEMP_DIR=$(mktemp -d)
          cp "./devops-pipelines/load-testing/load-testing-eventhub-restricted-public-access.jmx" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.jmx"
          cp "./devops-pipelines/load-testing/load-testing-eventhubevents1.csv" "$TEMP_DIR/load-testing-eventhubevents1.csv"
          cp "./devops-pipelines/load-testing/load-testing-eventhubevents2.csv" "$TEMP_DIR/load-testing-eventhubevents2.csv"
          cp "./devops-pipelines/load-testing/load-testing-eventhub-restricted-public-access.template.yaml" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{engineInstances}/${{ github.event.inputs.engineInstances }}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{errorPercentage}/${{ github.event.inputs.errorPercentage }}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{responseTimeMs}/${{ github.event.inputs.responseTimeMs }}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{loadTestSecretName}/eventhub_token/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{keyVaultName}/${LOAD_TESTING_KEY_VAULT_NAME}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{keyVaultSecretName}/${LOAD_TESTING_SECRET_NAME}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
          sed -i "s/{subnetId}/${LOAD_TESTING_SUBNET_ID////\\/}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"

          echo "load-testing-eventhub-restricted-public-access.yaml content:"
          cat "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"

          # Store the temporary directory in output variable
          echo "TEMP_DIR=${TEMP_DIR}"
          echo "TEMP_DIR=${TEMP_DIR}"  >> "$GITHUB_OUTPUT"

      - name: 'Step Run Load Testing Eventhub Restricted Public Access'
        uses: azure/load-testing@v1
        with:
          loadTestConfigFile: '${{ steps.configureloadtest.outputs.TEMP_DIR }}/load-testing-eventhub-restricted-public-access.yaml'
          resourceGroup: ${{ steps.deployloadtest.outputs.LOAD_TESTING_RESOURCE_GROUP }}
          loadTestResource: ${{ steps.deployloadtest.outputs.LOAD_TESTING_NAME }}
          secrets: |
            [
            ]
          env: |
            [
              {
              "name": "eventhub_name_space",
              "value": "${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_NAME_SPACE }}"
              },
              {
              "name": "eventhub_input_1",
              "value": "${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_1_NAME }}"
              },
              {
              "name": "eventhub_input_2",
              "value": "${{ needs.stage-deploy-infrastructure.outputs.EVENTHUB_INPUT_2_NAME }}"
              },
              {
              "name": "duration",
              "value": "${{ github.event.inputs.duration }}"
              },
              {
              "name": "threads",
              "value": "${{ github.event.inputs.threads }}"
              }
            ]

      - name: Close access to EventHub and KeyVault for the test
        if: ${{ always() }}
        run: |
          cmd="devops-pipelines/utils/iactool.sh -a closetest -c ${{ env.CONFIGURATION_FILE }}"
          echo "$cmd"
          eval "$cmd"


      - uses: actions/upload-artifact@v3
        with:
          name: loadTestResults
          path: ${{ github.workspace }}/loadTest
