---
trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - devops-pipelines/azure-pipelines/azure-pipelines-load-testing.yml
      - devops-pipelines/load-testing/load-testing-eventhub-restricted-public-access.yaml
      - devops-pipelines/load-testing/load-testing-eventhub-restricted-public-access.jmx

pool:
  vmImage: ubuntu-latest

parameters:
  - name: eventhubSku
    displayName: Azure Event Hubs Sku
    type: string
    default: "Standard"
    values:
      - "Basic"
      - "Standard"
      - "Premium"
  - name: duration
    displayName: Azure Load Testing duration in seconds
    type: number
    default: 60
  - name: threads
    displayName: Azure Load Testing number of threads
    type: number
    default: 1
  - name: engineInstances
    displayName: Azure Load Testing number of Engine Instances
    type: number
    default: 1
  - name: errorPercentage
    displayName: Azure Load Testing success criteria Error Percentage threshold
    type: number
    default: 5
  - name: responseTimeMs
    displayName: Azure Load Testing success criteria average response time in ms threshold
    type: number
    default: 100

variables:
  - name: CONFIGURATION_FILE
    value: './configuration/.default.env'
  - group: load-testing-vg

stages:
  - stage: stage_deploy_infrastructure
    displayName: stage-deploy-infrastructure
    condition: succeeded()
    jobs:
      - job: JobDeployInfrastructure
        displayName: Job Deploy Infrastructure
        steps:
          - task: AzureCLI@2
            displayName: 'Install Configuration file'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
                AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
                {
                  echo "AZURE_REGION=$(AZURE_REGION)"
                  echo "AZURE_TEST_SUFFIX=$(AZURE_TEST_SUFFIX)"
                  echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
                  echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"
                } >> $(CONFIGURATION_FILE)
                cat $(CONFIGURATION_FILE)

          - task: AzureCLI@2
            displayName: 'Step Deploy Infrastructure'
            name: StepDeployInfrastructure
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              failOnStandardError: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                cmd="$(System.DefaultWorkingDirectory)/devops-pipelines/utils/load-testing-tool.sh -a deploy -c $(CONFIGURATION_FILE) -h ${{ parameters.eventhubSku }} "
                echo "##[command]$cmd"
                eval "$cmd"
                # Read new variables set after the deployment in configuration file
                set -o allexport
                source "${{ variables.CONFIGURATION_FILE }}"
                set +o allexport
                # Create the associated Azure DevOps variables
                echo "##vso[task.setvariable variable=EVENTHUB_NAME_SPACE;isOutput=true]${EVENTHUB_NAME_SPACE}"
                echo "##vso[task.setvariable variable=EVENTHUB_INPUT_1_NAME;isOutput=true]${EVENTHUB_INPUT_1_NAME}"
                echo "##vso[task.setvariable variable=EVENTHUB_INPUT_2_NAME;isOutput=true]${EVENTHUB_INPUT_2_NAME}"
                echo "##vso[task.setvariable variable=EVENTHUB_OUTPUT_1_NAME;isOutput=true]${EVENTHUB_OUTPUT_1_NAME}"
                echo "##vso[task.setvariable variable=EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME}"
                echo "##vso[task.setvariable variable=EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME}"
                echo "##vso[task.setvariable variable=EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME;isOutput=true]${EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME}"
                echo "##vso[task.setvariable variable=STORAGE_ACCOUNT_NAME;isOutput=true]${STORAGE_ACCOUNT_NAME}"
                echo "##vso[task.setvariable variable=APP_INSIGHTS_NAME;isOutput=true]${APP_INSIGHTS_NAME}"
                echo "##vso[task.setvariable variable=RESOURCE_GROUP;isOutput=true]${RESOURCE_GROUP}"

  - stage: stage_load_test
    displayName: stage-load-test
    dependsOn:
      - stage_deploy_infrastructure
    variables:
      EVENTHUB_NAME_SPACE: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_NAME_SPACE'] ]
      EVENTHUB_INPUT_1_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_NAME'] ]
      EVENTHUB_INPUT_2_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_NAME'] ]
      EVENTHUB_OUTPUT_1_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_NAME'] ]
      EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME'] ]
      EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME'] ]
      EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME'] ]
      STORAGE_ACCOUNT_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.STORAGE_ACCOUNT_NAME'] ]
      APP_INSIGHTS_NAME: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.APP_INSIGHTS_NAME'] ]
      RESOURCE_GROUP: $[ stageDependencies.stage_deploy_infrastructure.JobDeployInfrastructure.outputs['StepDeployInfrastructure.RESOURCE_GROUP'] ]


    condition: succeeded()
    jobs:
      - job: JobLoadTest
        displayName: Job Load Test
        steps:
          - task: AzureCLI@2
            displayName: 'Step Azure Authentication'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                AZURE_SUBSCRIPTION_ID=$(az account show --query 'id' --output tsv)
                AZURE_TENANT_ID=$(az account show --query 'tenantId' --output tsv)
                {
                  echo "AZURE_REGION=$(AZURE_REGION)"
                  echo "AZURE_TEST_SUFFIX=$(AZURE_TEST_SUFFIX)"
                  echo "AZURE_SUBSCRIPTION_ID=$AZURE_SUBSCRIPTION_ID"
                  echo "AZURE_TENANT_ID=$AZURE_TENANT_ID"
                  echo "EVENTHUB_NAME_SPACE=$(EVENTHUB_NAME_SPACE)"
                  echo "EVENTHUB_INPUT_1_NAME=$(EVENTHUB_INPUT_1_NAME)"
                  echo "EVENTHUB_INPUT_2_NAME=$(EVENTHUB_INPUT_2_NAME)"
                  echo "EVENTHUB_OUTPUT_1_NAME=$(EVENTHUB_OUTPUT_1_NAME)"
                  echo "EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME=$(EVENTHUB_INPUT_1_CONSUMER_GROUP_NAME)"
                  echo "EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME=$(EVENTHUB_INPUT_2_CONSUMER_GROUP_NAME)"
                  echo "EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME=$(EVENTHUB_OUTPUT_1_CONSUMER_GROUP_NAME)"
                  echo "STORAGE_ACCOUNT_NAME=$(STORAGE_ACCOUNT_NAME)"
                  echo "APP_INSIGHTS_NAME=$(APP_INSIGHTS_NAME)"
                  echo "RESOURCE_GROUP=$(RESOURCE_GROUP)"
                } >> "$(CONFIGURATION_FILE)"

          - task: AzureCLI@2
            displayName: 'Deploy Load Testing Infrastructure'
            name: deployloadtest
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                cmd="devops-pipelines/utils/load-testing-tool.sh -a deploytest -c $(CONFIGURATION_FILE) "
                echo "$cmd"
                eval "$cmd"

                # Read variables from configuration file
                set -o allexport
                source "$(CONFIGURATION_FILE)"
                set +o allexport

                echo "LOAD_TESTING_RESOURCE_GROUP=${LOAD_TESTING_RESOURCE_GROUP}"
                echo "LOAD_TESTING_NAME=${LOAD_TESTING_NAME}"

                # store load testing resource name and load testing resource group in step output
                echo "##vso[task.setvariable variable=LOAD_TESTING_RESOURCE_GROUP;issecret=true]$LOAD_TESTING_RESOURCE_GROUP"
                echo "##vso[task.setvariable variable=LOAD_TESTING_NAME;issecret=true]$LOAD_TESTING_NAME"

          - task: AzureCLI@2
            displayName: 'Open access to EventHub and KeyVault for the test'
            name: openloadtest
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                cmd="devops-pipelines/utils/load-testing-tool.sh -a opentest -c $(CONFIGURATION_FILE)"
                echo "$cmd"
                eval "$cmd"

          - task: AzureCLI@2
            displayName: 'Get EventHub Token and store it in Key Vault'
            name: getandstoretoken
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Read variables from configuration file
                set -o allexport
                source "$(CONFIGURATION_FILE)"
                set +o allexport

                cat "$(CONFIGURATION_FILE)"

                # Get Event Hub Token
                KEY=$(az eventhubs namespace authorization-rule keys list --resource-group "$(RESOURCE_GROUP)" --namespace-name "$(EVENTHUB_NAME_SPACE)" --name RootManageSharedAccessKey | jq -r .primaryKey)
                echo "KEY: $KEY"
                EVENTHUB_TOKEN=$("$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/get-event-hub-token.sh" "$(EVENTHUB_NAME_SPACE)" RootManageSharedAccessKey "${KEY}")
                echo "EVENTHUB_TOKEN: $EVENTHUB_TOKEN"

                # store eventhub token into azure key vault secret
                az keyvault secret set --vault-name "${LOAD_TESTING_KEY_VAULT_NAME}" --name "${LOAD_TESTING_SECRET_NAME}" --value "${EVENTHUB_TOKEN}" --output none

                # the line below store the Eventhub token in an Azure DevOps secret
                # currently this secret is not used for this deployment,
                # we use Azure Key Vault to store the secret.
                # echo "##vso[task.setvariable variable=EVENTHUB_TOKEN;issecret=true]$EVENTHUB_TOKEN"

          - task: AzureCLI@2
            displayName: 'Configure and display Load Testing Configuration for Eventhub'
            name: configureloadtest
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                # Read variables from configuration file
                set -o allexport
                source "$(CONFIGURATION_FILE)"
                set +o allexport

                echo "EVENTHUB_NAME_SPACE: $(EVENTHUB_NAME_SPACE)"
                echo "EVENTHUB_INPUT_1_NAME: $(EVENTHUB_INPUT_1_NAME)"
                echo "EVENTHUB_INPUT_2_NAME: $(EVENTHUB_INPUT_2_NAME)"
                echo "DURATION: ${{ parameters.duration }}"
                echo "THREADS: ${{ parameters.threads }}"
                echo "ENGINE INSTANCES: ${{ parameters.engineInstances }}"
                echo "ERROR PERCENTAGE: ${{ parameters.errorPercentage }}"
                echo "RESPONSE TIME MS: ${{ parameters.responseTimeMs }}"
                # Update Load Testing configuration file
                TEMP_DIR=$(mktemp -d)
                cp "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-restricted-public-access.jmx" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.jmx"
                cp "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhubevents1.csv" "$TEMP_DIR/load-testing-eventhubevents1.csv"
                cp "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhubevents2.csv" "$TEMP_DIR/load-testing-eventhubevents2.csv"
                cp "$(System.DefaultWorkingDirectory)/devops-pipelines/load-testing/load-testing-eventhub-restricted-public-access.template.yaml" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{engineInstances}/${{ parameters.engineInstances }}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{errorPercentage}/${{ parameters.errorPercentage }}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{responseTimeMs}/${{ parameters.responseTimeMs }}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{loadTestSecretName}/eventhub_token/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{keyVaultName}/${LOAD_TESTING_KEY_VAULT_NAME}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{keyVaultSecretName}/${LOAD_TESTING_SECRET_NAME}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"
                sed -i "s/{subnetId}/${LOAD_TESTING_SUBNET_ID////\\/}/g" "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"

                echo "load-testing-eventhub-restricted-public-access.yaml content:"
                cat "$TEMP_DIR/load-testing-eventhub-restricted-public-access.yaml"

                # Store the temporary directory in output variable
                echo "##vso[task.setvariable variable=TEMP_DIR;issecret=false]$TEMP_DIR"
                echo "##vso[task.setvariable variable=LOAD_TESTING_RESOURCE_GROUP;issecret=false]$LOAD_TESTING_RESOURCE_GROUP"
                echo "##vso[task.setvariable variable=LOAD_TESTING_NAME;issecret=false]$LOAD_TESTING_NAME"

          - task: AzureLoadTest@1
            displayName: 'Step Run Load Testing EventHub'
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              loadTestConfigFile: '$(TEMP_DIR)/load-testing-eventhub-restricted-public-access.yaml'
              resourceGroup: $(LOAD_TESTING_RESOURCE_GROUP)
              loadTestResource: $(LOAD_TESTING_NAME)
              secrets: |
                [
                ]
              env: |
                [
                  {
                  "name": "eventhub_name_space",
                  "value": "$(EVENTHUB_NAME_SPACE)"
                  },
                  {
                  "name": "eventhub_input_1",
                  "value": "$(EVENTHUB_INPUT_1_NAME)"
                  },
                  {
                  "name": "eventhub_input_2",
                  "value": "$(EVENTHUB_INPUT_2_NAME)"
                  },
                  {
                  "name": "duration",
                  "value": "${{ parameters.duration }}"
                  },
                  {
                  "name": "threads",
                  "value": "${{ parameters.threads }}"
                  }
                ]

          - task: AzureCLI@2
            displayName: 'Close access to EventHub and KeyVault for the test'
            condition: always()
            inputs:
              azureSubscription: $(SERVICE_CONNECTION)
              scriptType: "bash"
              addSpnToEnvironment: "true"
              scriptLocation: "inlineScript"
              inlineScript: |
                cmd="devops-pipelines/utils/load-testing-tool.sh -a closetest -c $(CONFIGURATION_FILE)"
                echo "$cmd"
                eval "$cmd"

          - publish: $(System.DefaultWorkingDirectory)/loadTest
            displayName: 'Step Publish Load Testing Results for deployment eventhub-restricted-public-access in $(System.DefaultWorkingDirectory)/loadTest'
            artifact: results
